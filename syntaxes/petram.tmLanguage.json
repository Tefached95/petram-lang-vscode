{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Petram",
  "fileTypes": [
    "petra"
  ],
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#brackets"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.petra",
          "match": "\\b(if|else|foreach|in|match|func|struct|trait|new|return|constrain|field|method)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.petra",
          "match": "\\b(Int|Float|String|Bool|List|Option|Result|Self)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.petra",
          "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.petra",
          "match": "\\b([0-9]+(\\.?[0-9]*)|\\.?[0-9]+)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.petra",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.petra",
          "match": "\\\\."
        },
        {
          "name": "variable.other.interpolated.petra",
          "match": "\\{\\$[a-zA-Z_][a-zA-Z0-9_]*\\}"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-dash.petra",
          "match": "--.*$"
        },
        {
          "name": "comment.block.petra",
          "begin": "\\{-",
          "end": "-\\}"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function-call.petra",
          "begin": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(#\\[)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.petra"
            },
            "2": {
              "name": "punctuation.section.brackets.begin.petra"
            }
          },
          "end": "\\]#",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.brackets.end.petra"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "entity.name.function.method.petra",
          "match": "(?<=method\\s+#\\[)[a-zA-Z_][a-zA-Z0-9_]*(?=\\]#)"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.petra",
          "match": "(:=|:|=|->|=>|\\+|-|\\*|/|%|==|!=|<|>|<=|>=)"
        },
        {
          "name": "keyword.operator.word.petra",
          "match": "\\b(and|or|not)\\b"
        },
        {
          "name": "keyword.operator.pipe.petra",
          "match": "\\|>"
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "name": "punctuation.section.braces.begin.petra",
          "match": "\\{\\|"
        },
        {
          "name": "punctuation.section.braces.end.petra",
          "match": "\\|\\}"
        }
      ]
    }
  },
  "scopeName": "source.petra"
}